(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[422],{3827:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/05-Functions",function(){return s(8354)}])},6408:function(e,n,s){"use strict";var i=s(1527);s(959);let r={logo:(0,i.jsx)("span",{children:"Generated JavaScript Course"}),project:{link:"https://github.com/shuding/nextra-docs-template"},chat:{link:"https://discord.com"},docsRepositoryBase:"https://github.com/shuding/nextra-docs-template",footer:{text:"Nextra Docs Template"}};n.Z=r},8354:function(e,n,s){"use strict";s.r(n),s.d(n,{default:function(){return l.Z}});var i=s(1527),r=s(2093),o=s(2691),a=s(6408);s(9054);var t=s(313);s(6484);var l=s(9181);function c(e){let n=Object.assign({h1:"h1",h3:"h3",p:"p",code:"code",pre:"pre",span:"span"},(0,t.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{children:"Functions in JavaScript"}),"\n",(0,i.jsx)(n.h3,{id:"51-function-declarations-and-expressions",children:"5.1 Function Declarations and Expressions"}),"\n",(0,i.jsxs)(n.p,{children:["Functions in JavaScript can be defined using declarations or expressions. A function declaration, like ",(0,i.jsx)(n.code,{children:"function greet(name)"}),", declares a named function and hoists it, meaning it can be called before its declaration in the code. A function expression, on the other hand, involves creating a function and assigning it to a variable, typically an anonymous function. This approach doesn't hoist the function, so it must be defined before it is used."]}),"\n",(0,i.jsx)(n.p,{children:"Code Example:"}),"\n",(0,i.jsx)(n.pre,{"data-language":"js","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"js","data-theme":"default",children:[(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"function"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"greet"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"(name) {"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"return"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:'"Hello, "'}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"+"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" name "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"+"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:'"!"'}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:";"})]}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,i.jsx)(n.h3,{id:"52-function-parameters-and-arguments",children:"5.2 Function Parameters and Arguments"}),"\n",(0,i.jsx)(n.p,{children:"In JavaScript, function parameters are the named variables listed in the function definition, serving as placeholders for the values the function will operate on. Arguments, on the other hand, are the actual values passed to the function when it is invoked. These values are mapped to the function's parameters in the order they are passed."}),"\n",(0,i.jsx)(n.p,{children:"Code Example:"}),"\n",(0,i.jsx)(n.pre,{"data-language":"js","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"js","data-theme":"default",children:[(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"function"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"add"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"(x"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" y) {"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"return"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" x "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"+"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" y;"})]}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,i.jsx)(n.h3,{id:"53-function-scope-closures-and-lexical-scoping",children:"5.3 Function Scope, Closures, and Lexical Scoping"}),"\n",(0,i.jsx)(n.p,{children:"Function scope in JavaScript refers to the visibility and lifetime of variables defined within a function. Variables declared within a function are local to that function and cannot be accessed outside of it. Closures are a powerful feature where a function retains access to the scope in which it was created, even after that scope has closed. Lexical scoping means that the accessibility of variables is determined by their physical location in the written code."}),"\n",(0,i.jsx)(n.p,{children:"Code Example:"}),"\n",(0,i.jsx)(n.pre,{"data-language":"js","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"js","data-theme":"default",children:[(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"function"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"outer"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"() {"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"let"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" outerVar "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:'"I am outer!"'}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:";"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"function"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"inner"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"() {"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"console"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:".log"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"(outerVar); "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-comment)"},children:"// Accesses outerVar from its parent function's scope"})]}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  }"})}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"return"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" inner;"})]}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,i.jsx)(n.h3,{id:"54-recursion-and-tail-recursion",children:"5.4 Recursion and Tail Recursion"}),"\n",(0,i.jsx)(n.p,{children:"Recursion in JavaScript is a programming technique where a function calls itself in order to solve a problem. Itâ€™s commonly used in scenarios where a problem can be divided into similar sub-problems. Tail recursion is a specific form of recursion where the recursive call is the last operation in the function. This can be optimized by some compilers to improve performance and stack usage."}),"\n",(0,i.jsx)(n.p,{children:"Code Example:"}),"\n",(0,i.jsx)(n.pre,{"data-language":"js","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"js","data-theme":"default",children:[(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"function"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"factorial"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"(n) {"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"if"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" (n "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"<="}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"1"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:") {"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"return"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"1"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:";"})]}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  }"})}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"return"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" n "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"*"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"factorial"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"(n "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"-"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"1"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:");"})]}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,i.jsx)(n.h3,{id:"55-higher-order-functions-and-callbacks",children:"5.5 Higher-Order Functions and Callbacks"}),"\n",(0,i.jsx)(n.p,{children:"Higher-order functions are functions that take other functions as arguments or return them as results. This concept is a key part of functional programming in JavaScript. Callbacks are functions passed as arguments to another function. These are typically used to handle asynchronous operations or to customize the behavior of a function."}),"\n",(0,i.jsx)(n.p,{children:"Code Example:"}),"\n",(0,i.jsx)(n.pre,{"data-language":"js","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"js","data-theme":"default",children:[(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"function"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"doMath"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"(operation"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" x"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" y) {"})]}),"\n",(0,i.jsxs)(n.span,{className:"line",children:[(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"return"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"operation"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"(x"}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" y);"})]}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})})]})}e=s.hmd(e),(0,r.j)({Content:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)},nextraLayout:o.ZP,hot:e.hot,pageOpts:{filePath:"pages/05-Functions.md",route:"/05-Functions",frontMatter:{},pageMap:[{kind:"MdxPage",name:"02-Variables",route:"/02-Variables"},{kind:"MdxPage",name:"03-Data_Structures",route:"/03-Data_Structures"},{kind:"MdxPage",name:"04-Control_Flow",route:"/04-Control_Flow"},{kind:"MdxPage",name:"05-Functions",route:"/05-Functions"},{kind:"MdxPage",name:"06-ObjectOriented_Programming",route:"/06-ObjectOriented_Programming"},{kind:"MdxPage",name:"07-Working_with_the_DOM",route:"/07-Working_with_the_DOM"},{kind:"MdxPage",name:"08-Advanced_JavaScript_Concepts",route:"/08-Advanced_JavaScript_Concepts"},{kind:"MdxPage",name:"09-Testing_and_Debugging",route:"/09-Testing_and_Debugging"},{kind:"MdxPage",name:"10-Modular_JavaScript",route:"/10-Modular_JavaScript"},{kind:"Meta",data:{index:"Introduction","02-Variables":"Variables","03-Data_Structures":"Data Structures","04-Control_Flow":"Control Flow","05-Functions":"Functions","06-ObjectOriented_Programming":"Object Oriented Programming","07-Working_with_the_DOM":"Working with the DOM","08-Advanced_JavaScript_Concepts":"Advanced Concepts","09-Testing_and_Debugging":"Testing and Debugging","10-Modular_JavaScript":"Modular JavaScript",about:{title:"About",type:"page"},contact:{title:"Contact â†—",type:"page",href:"https://twitter.com/shuding_",newWindow:!0}}},{kind:"MdxPage",name:"about",route:"/about"},{kind:"Folder",name:"advanced",route:"/advanced",children:[{kind:"MdxPage",name:"satori",route:"/advanced/satori"},{kind:"Meta",data:{satori:"Satori"}}]},{kind:"MdxPage",name:"index",route:"/"}],headings:[{depth:1,value:"Functions in JavaScript",id:"functions-in-javascript"},{depth:3,value:"5.1 Function Declarations and Expressions",id:"51-function-declarations-and-expressions"},{depth:3,value:"5.2 Function Parameters and Arguments",id:"52-function-parameters-and-arguments"},{depth:3,value:"5.3 Function Scope, Closures, and Lexical Scoping",id:"53-function-scope-closures-and-lexical-scoping"},{depth:3,value:"5.4 Recursion and Tail Recursion",id:"54-recursion-and-tail-recursion"},{depth:3,value:"5.5 Higher-Order Functions and Callbacks",id:"55-higher-order-functions-and-callbacks"}],timestamp:170645632e4,flexsearch:{codeblocks:!0},title:"Functions in JavaScript"},themeConfig:a.Z,pageNextRoute:"/05-Functions",pageOptsChecksum:void 0,dynamicMetaModules:[]})}},function(e){e.O(0,[774,311,888,179],function(){return e(e.s=3827)}),_N_E=e.O()}]);